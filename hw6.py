# Задача 1.	Напишите функцию sum_range(start, end),
# которая суммирует все целые числа от значения start до величины end включительно
print('Задача 1')
def sum_range(start, end):
    total = 0
    for num in range(start, end + 1):
        total += num
    return total

# Пример использования: ввод начала и конца диапазона, и вызов функции
# print(sum_range(1, 5))  # Например, вывод: 15 (1 + 2 + 3 + 4 + 5)
start = int(input("Введите начало диапазона: "))
end = int(input("Введите конец диапазона: "))
print("Сумма чисел в диапазоне:", sum_range(start, end))


# Задача 2. Написать функцию square, принимающую 1 аргумент — сторону квадрата,
# и возвращающую 3 значения (с помощью кортежа, после return перечислить все значения через запятую):
# периметр квадрата, площадь квадрата и диагональ квадрата.
<<<<<<< HEAD
# Периметр=4×side; Площадь=side; Диагональ=side×2^0,5
=======
# Периметр=4×side; Площадь=side^2; Диагональ=side×2^0,5 (по т. Пифагора)
>>>>>>> a6ad74685007d9470c741550a6df82dea5556878

print('Задача 2')
import math

# Функция для вычисления периметра, площади и диагонали квадрата
def square(side):
    perimeter = 4 * side
    area = side ** 2
<<<<<<< HEAD
    diagonal = side * math.sqrt(2)
    return perimeter, area, diagonal

=======
    diagonal = side * math.sqrt(2) # для вычисления квадратного корня из числа 2 можно использовать функцию sqrt из модуля math
    return perimeter, area, diagonal

# Чтобы вернуть несколько значений из функции в виде кортежа,
# просто перечислите значения через запятую после return.
# В Python, если в return указать несколько значений через запятую,
# они автоматически будут объединены в кортеж.
# Если после return указать несколько значений, функция вернёт их как один кортеж.

>>>>>>> a6ad74685007d9470c741550a6df82dea5556878
# Запрашиваем у пользователя длину стороны квадрата
side = float(input("Введите длину стороны квадрата: "))

# Вызов функции и получение результатов
# Пример использования
# result = square(5)
# print("Периметр:", result[0], "Площадь:", result[1], "Диагональ:", result[2])
result = square(side)

# Вывод результатов с округлением до двух знаков
print("Периметр:", round(result[0], 2))
print("Площадь:", round(result[1], 2))
print("Диагональ:", round(result[2], 2))

<<<<<<< HEAD
=======
# def arithmetic_operations(a, b):
#     return a + b, a - b, a * b  # Возвращаем три значения в виде кортежа
#
# # Вызов функции и сохранение результата
# result = arithmetic_operations(10, 5)
# print(result)  # Вывод: (15, 5, 50)

# После вызова функции возвращённый кортеж можно:
# сохранить в одной переменной, как в примере выше,
# или распаковать в отдельные переменные.

# Распаковка кортежа
#sum_, diff, prod = arithmetic_operations(10, 5)
# print(sum_)   # Вывод: 15
# print(diff)   # Вывод: 5
# print(prod)   # Вывод: 50
>>>>>>> a6ad74685007d9470c741550a6df82dea5556878

# Задача 3. Пользователь делает вклад в размере a рублей сроком на years лет
# под 10% годовых (каждый год размер его вклада увеличивается на 10%.
# Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже будут проценты).
# Написать функцию bank, принимающая аргументы a и years, и возвращающую сумму,
# которая будет на счету пользователя.
# Функция bank рассчитывает сумму вклада с ежегодным начислением 10% за указанный срок.
# Формула для расчета итоговой суммы вклада, увеличивающегося на 10% ежегодно:
# a = a * 1.1 (каждый год)

print('Задача 3')
def bank(a, years):
    for _ in range(years):
        a *= 1.1  # Увеличиваем сумму на 10% каждый год
    return round(a, 2)  # Округляем результат до двух знаков после запятой

<<<<<<< HEAD
=======
# В Python символ _ в цикле for используется как замена переменной,
# значение которой не будет использоваться в теле цикла.
# Это своего рода соглашение, указывающее на то, что переменная является
# "молчаливой" и её значение нам не нужно.
# for _ in range(years):
#     a *= 1.1
# Здесь цикл выполняется years раз, и на каждой итерации переменная a умножается на 1.1.
# Поскольку значение счётчика цикла (обычно переменная i, j и т.д.)
# не используется внутри цикла, вместо имени переменной ставят _.
# Использование _ в циклах удобно, когда:
# важно лишь количество повторений, а не счётчик цикла.
# код становится более читабельным, так как показывает, что переменная итерации не используется.

>>>>>>> a6ad74685007d9470c741550a6df82dea5556878
# Пример использования
# print(bank(1000, 5))  # Пример для вклада 1000 рублей на 5 лет

# Запрашиваем у пользователя размер вклада и срок
a = float(input("Введите размер вклада: "))
years = int(input("Введите срок вклада в годах: "))

# Выводим итоговую сумму на счете
<<<<<<< HEAD
print("Сумма на счету через", years, "лет:", bank(a, years))
=======
print("Сумма на счету через", years, "лет:", bank(a, years))
>>>>>>> a6ad74685007d9470c741550a6df82dea5556878
